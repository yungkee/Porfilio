"use client";
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import type * as THREE from "three";
import React, { useRef, type JSX } from "react";
import { useGLTF } from "@react-three/drei";
import { type GLTF } from "three-stdlib";
import { useFrame } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    Object_2: THREE.Mesh;
  };
  materials: {
    initialShadingGroup: THREE.MeshStandardMaterial;
  };
};

const url = "/models/hat.glb";

useGLTF.preload(url);

export function Hat(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(url) as unknown as GLTFResult;
  const modelRef = useRef<THREE.Group>(null);

  useFrame(() => {
    if (!modelRef.current) return;
    modelRef.current.rotation.y += 0.007;
  });

  return (
    <group
      {...props}
      ref={modelRef}
      dispose={null}
      position={[0, 0, 0]}
      rotation={[0.4, -1, 0]}
      scale={[1.8, 1.8, 1.8]}
    >
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_2.geometry}
        material={materials.initialShadingGroup}
        position={[0, -3.867, 0]}
        rotation={[-Math.PI / 2, 0, 0]}
      />
    </group>
  );
}
